generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String?
  role          UserRole       @default(CLIENT)
  businessId    String?
  business      Business?      @relation(fields: [businessId], references: [id])
  conversations Conversation[]
  messages      Message[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  notification  Notification[]
}

model Business {
  id            String         @id @default(cuid())
  name          String
  users         User[]
  conversations Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
}

model Conversation {
  id           String         @id @default(cuid())
  businessId   String
  userId       String?
  // guestId      String?
  // clientType   ClientType
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  notification Notification[]
  messages     Message[]
  user         User?          @relation(fields: [userId], references: [id])
  business     Business       @relation(fields: [businessId], references: [id])

  @@index([businessId])
}

model Notification {
  id             String           @id @default(cuid())
  conversationId String?
  userId         String?
  title          String
  content        String
  type           NotificationType @default(NEW_MESSAGE)
  isRead         Boolean          @default(false)
  createdAt      DateTime         @default(now())
  user           User?            @relation(fields: [userId], references: [id])
  conversation   Conversation?    @relation(fields: [conversationId], references: [id])
}

model Message {
  id             String           @id @default(cuid())
  conversationId String
  content        String
  userId         String?
  // guestId        String?
  deletedAt      DateTime?
  chatTypes      Json?
  senderType     SenderType
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  conversation   Conversation     @relation(fields: [conversationId], references: [id])
  user           User?            @relation(fields: [userId], references: [id])
  messageOnMedia MessageOnMedia[]

  @@index([conversationId])
}

model MessageOnMedia {
  id        String   @id @default(cuid())
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  mediaId   String
  media     Media    @relation(fields: [mediaId], references: [id])
  addedAt   DateTime @default(now())
}

model Media {
  id         String           @id @default(cuid())
  url        String
  fileName   String
  mimeType   String
  size       Int // in bytes
  uploadedAt DateTime         @default(now())
  messages   MessageOnMedia[]
}

enum NotificationType {
  NEW_MESSAGE
  SYSTEM
  MESSAGE_READ
  CONVERSATION_NEW
  OTHER
}

enum SenderType {
  CLIENT
  ADMIN
}

enum UserRole {
  CLIENT
  ADMIN
}

enum ChatType {
  TEXT
  IMAGE
  VIDEO
  FILE
  AUDIO
}
